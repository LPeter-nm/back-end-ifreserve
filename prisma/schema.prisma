generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GENERAL
  ADMIN
  USER
}

enum Type_User {
  ALUNO
  SERVIDOR
  EXTERNO
}

enum StatusUser {
  ATIVO
  INATIVO
}


enum StatusRestore {
  CONCLUIDO
  PENDENTE
}

enum StatusSport {
  PENDENTE
  CONFIRMADA
  RECUSADA
  CANCELADA
}

enum Type_Reserve {
  OFICIO
  EVENTO 
  AULA
}

enum Type_Practice {
  TREINO
  RECREACAO
  AMISTOSO
}

enum Ocurrence {
  EVENTO_UNICO
  SEMANALMENTE
}

// Tabela usuário
model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  type_User Type_User @default(ALUNO)
  role Role @default(USER)
  status StatusUser? @default(ATIVO)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  userInternal User_Internal?
  userExternal User_External?
  notifications Notification[]
  restores Restore[]
  reserves Reserve[]

  @@index([email])
  @@index([createdAt])
}

// Tabela usuário interno 
model User_Internal {
  id String @id @default(uuid())
  registration String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Atributos de Relacionamento (especialização)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("userId")
}

// Tabela usuário externo
model User_External {
  id String @id @default(uuid())
  cpf String @unique
  phone String?
  address String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Atributos de Relacionamento (especialização)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

// Tabela restauração de senha
model Restore {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String
  used         Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  expirationAt DateTime @map("updated_at")

  @@map("restores")
}

// Tabela de reserva 
model Reserve {
  id String @id @default(uuid())
  type_Reserve Type_Reserve @default(OFICIO)
  ocurrence Ocurrence
  date_Start DateTime
  date_End DateTime
  hour_Start String
  hour_End String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  sport Sport?
  classroom Classroom?
  event Event?
  report Report?

  @@index([date_Start, date_End])
  @@index([userId])
}

// Tabela de reserva da quadra para ofício
model Sport {
  id String @id @default(uuid())
  type_Practice Type_Practice 
  number_People Int 
  participants String 
  request_Equipment String
  status StatusSport @default(PENDENTE)
  anseweredBy String?
  comments String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId String @unique
}

// Tabela de reserva da quadra para aulas de Ed. Física
model Classroom {
  id String @id @default(uuid())
  course String
  matter String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId String @unique
}

// Tabela de reserva da quadra para eventos ou eventos fora da quadra
model Event {
  id String @id @default(uuid())
  name String
  description String
  location String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId String @unique
}

model Report {
  id String @id @default(uuid())
  name_User String 
  people_Appear String
  requested_Equipment String
  description_Court String
  description_Equipment String
  time_Used String
  date_Used DateTime
  description String?
  comments String?
  status Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId String @unique
}

model Notification {
  id String @id @default(uuid())
  message String
  read Boolean @default(false)
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}