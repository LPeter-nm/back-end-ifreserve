generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SISTEMA_ADMIN
  PE_ADMIN // Professores de Educação Física
  USER
}

enum ServerFunction {
  PROFESSOR_EDUCACAO_FISICA
  PROFESSOR_OUTROS
  DIRETOR
  COORDENADOR
  OUTRO
}

enum TypeUser {
  ALUNO
  SERVIDOR
  EXTERNO
}

enum StatusUser {
  ATIVO
  INATIVO
}


enum StatusRestore {
  CONCLUIDO
  PENDENTE
}

enum StatusReserve {
  CADASTRADO
  PENDENTE
  CONFIRMADA
  RECUSADA
  CANCELADA
}

enum TypeReserve {
  OFICIO
  EVENTO 
  AULA
}

enum TypePractice {
  TREINO
  RECREACAO
  AMISTOSO
}

enum Occurrence {
  EVENTO_UNICO
  SEMANALMENTE
}

enum NotificationType {
  RESERVA_CONFIRMADA
  RESERVA_RECUSADA
  RELATORIO_PENDENTE
}


// Tabela usuário
model User {
  id String @id @default(uuid())
  name String
  identification String @unique
  email String @unique
  password String
  typeUser TypeUser @default(ALUNO)
  role Role @default(USER)
  status StatusUser? @default(ATIVO)
  createdAt DateTime @default(now()) @map("created_at")

  // Relacionamentos
  server Server?
  student Student?
  userExternal UserExternal?
  notifications Notification[]
  restores Restore[]
  reserves Reserve[]

  @@map("user")
  @@index([email])
  @@index([createdAt])
}

// Tabela usuário interno 
model Server {
  id String @id @default(uuid())
  roleInInstitution ServerFunction
  userId String @unique @map("userId")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")

  @@map("server")
}

model Student {
  id String @id @default(uuid())
  userId String @unique @map("userId")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("student")
}

// Tabela usuário externo
model UserExternal {
  id String @id @default(uuid())
  phone String?
  address String?
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")

  @@map("user-external")
}

// Tabela restauração de senha
model Restore {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String
  used         Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  expirationAt DateTime 

  @@map("restore")
}

model Reserve {
  id String @id @default(uuid())
  type_Reserve TypeReserve @default(OFICIO)
  status StatusReserve @default(PENDENTE)
  occurrence Occurrence
  dateTimeStart DateTime
  dateTimeEnd DateTime

  answeredBy String? //Servidor administrador que atualizou o status
  comments String? // Comentários livres sobre os motivos da atualização

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  sport Sport?
  classroom Classroom?
  event Event?

  @@map("reserve")
  @@index([userId])
}

model Sport {
  id String @id @default(uuid())
  typePractice TypePractice 
  numberParticipants Int 
  participants String 
  requestEquipment String
  pdfUrl String?  
  pdfName String? 
  
  completed Boolean? // Se true o relatório estará pendente para realização 

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  reserveId String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")
  
  report Report?
}

model Classroom {
  id String @id @default(uuid())
  course String
  matter String
  reserveId String @unique

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")
}

model Event {
  id String @id @default(uuid())
  name String
  description String
  location String
  reserveId String @unique

  reserve Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")
}

model Report {
  id String @id @default(uuid())
  nameUser String 
  peopleAppear String
  requestedEquipment String
  courtCondition String
  equipmentCondition String
  timeUsed String
  dateUsed DateTime
  generalComments String?
  commentsAdmin String?
  statusReadAdmin Boolean @default(false)
  sportId String @unique

  sport Sport @relation(fields: [sportId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @default(now()) @map("updated_at")

}

model Notification {
  id String @id @default(uuid())
  title String 
  content String 
  type NotificationType

  isRead Boolean @default(false) 
  linkTo String? 

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
}